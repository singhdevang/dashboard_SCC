library(readxl)
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(rmarkdown)
library(officer)
# Define variables for the workstream name and time frame
workstream_names <- "Workstream 2 - Community"
start_month_year <- "February 2023"
end_month_year <- "November 2023"
health_board_trusts <- NULL
# Function to filter,rename,select relevant columns, replace blank cells/ No report received cells with NA and extracting numbers from string
# Wrote two separate function for data cleaning and manipulation to make it easier for me
clean_and_rename <- function(workstream_names = NULL, start_month_year, end_month_year, health_board_trusts = NULL) {
# Read Excel file
df <- read_excel("C:/Users/De122459/OneDrive - NHS Wales/National SCC Project Planning/National SCC project planning.xlsx")
# Data cleaning and transformation
df <- df %>%
# Conditionally filter by 'Workstream' if the argument is not NULL
{
if(!is.null(workstream_names)) {
filter(., Workstream %in% workstream_names)
} else {
.
}
} %>%
# Conditionally filter by 'Health Board / Trust' if the argument is not NULL
{
if(!is.null(health_board_trusts)) {
filter(., `Health Board / Trust` %in% health_board_trusts)
} else {
.
}
}
df<-df |> rename("February 2023"= "Monthly Progress Score - February 2023 (MSSW only)",
"March 2023" = "Monthly Progress Score - March 2023 (MSSW ONLY)",
"April 2023" = "Monthly Progress Score - April 2023",
"May 2023" = "Monthly Progress Score - May 2023",
"June 2023" = "Monthly Progress Score - June 2023",
"July 2023" = "Monthly Progress Score - July 2023",
"August 2023" = "Monthly Progress Score - August 2023",
"September 2023" = "Monthly Progress Score - September 2023",
"October 2023" = "Monthly Progress Score - October 2023 (Due 21/11/23)",
"November 2023" = "Monthly Progress Score - November 2023 (Due 13th Dec)",
"December 2023" = "Monthly Progress Score - December 2023 (due 17th January)",
"January 2024" = "Monthly Progress Score - January 2024",
"February 2024" = "Monthly Progress Score - February 2024"
)
#Select the specific fields or ones that have 202 in them, this should pick up future ones as well!
df<- df |> select(c("Unique ID", "Health Board / Trust", "Project Title (inline with Monthly Reporting)")| contains("202"))
# Replace blank cells and "NO Report received" with NA
df[df == "" | df == "NO Report received"] <- NA
for (col in colnames(df)[4:length(colnames(df))]) {
df[[col]] <- str_extract(df[[col]], "\\d+\\.*\\d*")
}
month_year_cols <-colnames(df)[4:length(colnames(df))]
# Generate the complete sequence of month-years between start and end
full_sequence <- seq(as.Date(paste0("01 ", start_month_year), format = "%d %B %Y"),
as.Date(paste0("01 ", end_month_year), format = "%d %B %Y"),
by = "month")
full_sequence_formatted <- format(full_sequence, "%B %Y")
# Filter the columns that fall within the generated sequence
selected_month_cols <- month_year_cols[month_year_cols %in% full_sequence_formatted]
# Include other necessary columns
id_and_project_cols <- c("Unique ID", "Health Board / Trust", "Project Title (inline with Monthly Reporting)")
cols_to_keep <- c(id_and_project_cols, selected_month_cols)
# Filter and pivot the data frame to long format
long_df <- df %>%
select(all_of(cols_to_keep)) %>%
pivot_longer(cols = all_of(selected_month_cols),
names_to = "Month-Year",
values_to = "Score",
#keeps the column name even if it is NA
values_drop_na = FALSE) %>%
#make score numeric to include NA values
mutate(Score = as.numeric(Score))
# Convert 'Month-Year' to an ordered factor based on the full sequence
long_df$`Month-Year` <- factor(long_df$`Month-Year`, levels = full_sequence_formatted, ordered = TRUE)
return(long_df)
}
#set these at start of doc so it's easy to adapt and repeat
lonng_df <- clean_and_rename(workstream_names, start_month_year, end_month_year, health_board_trusts = NULL)
# Define variables for the workstream name and time frame
workstream_names <- "Workstream 2 - Community"
start_month_year <- "February 2023"
end_month_year <- "November 2023"
health_board_trusts <- NULL
# Function to filter,rename,select relevant columns, replace blank cells/ No report received cells with NA and extracting numbers from string
# Wrote two separate function for data cleaning and manipulation to make it easier for me
clean_and_rename <- function(workstream_names = NULL, start_month_year, end_month_year, health_board_trusts = NULL) {
# Read Excel file
df <- read_excel("C:/Users/De122459/OneDrive - NHS Wales/National SCC Project Planning/National SCC project planning.xlsx")
# Data cleaning and transformation
df <- df %>%
# Conditionally filter by 'Workstream' if the argument is not NULL
{
if(!is.null(workstream_names)) {
filter(., Workstream %in% workstream_names)
} else {
.
}
} %>%
# Conditionally filter by 'Health Board / Trust' if the argument is not NULL
{
if(!is.null(health_board_trusts)) {
filter(., `Health Board / Trust` %in% health_board_trusts)
} else {
.
}
}
df<-df |> rename("February 2023"= "Monthly Progress Score - February 2023 (MSSW only)",
"March 2023" = "Monthly Progress Score - March 2023 (MSSW ONLY)",
"April 2023" = "Monthly Progress Score - April 2023",
"May 2023" = "Monthly Progress Score - May 2023",
"June 2023" = "Monthly Progress Score - June 2023",
"July 2023" = "Monthly Progress Score - July 2023",
"August 2023" = "Monthly Progress Score - August 2023",
"September 2023" = "Monthly Progress Score - September 2023",
"October 2023" = "Monthly Progress Score - October 2023 (Due 21/11/23)",
"November 2023" = "Monthly Progress Score - November 2023 (Due 13th Dec)",
"December 2023" = "Monthly Progress Score - December 2023 (due 17th January)",
"January 2024" = "Monthly Progress Score - January 2024 (due 13th Feb 2024)",
"February 2024" = "Monthly Progress Score - February 2024 (due 13th march 2024)"
)
#Select the specific fields or ones that have 202 in them, this should pick up future ones as well!
df<- df |> select(c("Unique ID", "Health Board / Trust", "Project Title (inline with Monthly Reporting)")| contains("202"))
# Replace blank cells and "NO Report received" with NA
df[df == "" | df == "NO Report received"] <- NA
for (col in colnames(df)[4:length(colnames(df))]) {
df[[col]] <- str_extract(df[[col]], "\\d+\\.*\\d*")
}
month_year_cols <-colnames(df)[4:length(colnames(df))]
# Generate the complete sequence of month-years between start and end
full_sequence <- seq(as.Date(paste0("01 ", start_month_year), format = "%d %B %Y"),
as.Date(paste0("01 ", end_month_year), format = "%d %B %Y"),
by = "month")
full_sequence_formatted <- format(full_sequence, "%B %Y")
# Filter the columns that fall within the generated sequence
selected_month_cols <- month_year_cols[month_year_cols %in% full_sequence_formatted]
# Include other necessary columns
id_and_project_cols <- c("Unique ID", "Health Board / Trust", "Project Title (inline with Monthly Reporting)")
cols_to_keep <- c(id_and_project_cols, selected_month_cols)
# Filter and pivot the data frame to long format
long_df <- df %>%
select(all_of(cols_to_keep)) %>%
pivot_longer(cols = all_of(selected_month_cols),
names_to = "Month-Year",
values_to = "Score",
#keeps the column name even if it is NA
values_drop_na = FALSE) %>%
#make score numeric to include NA values
mutate(Score = as.numeric(Score))
# Convert 'Month-Year' to an ordered factor based on the full sequence
long_df$`Month-Year` <- factor(long_df$`Month-Year`, levels = full_sequence_formatted, ordered = TRUE)
return(long_df)
}
#set these at start of doc so it's easy to adapt and repeat
lonng_df <- clean_and_rename(workstream_names, start_month_year, end_month_year, health_board_trusts = NULL)
#set these at start of doc so it's easy to adapt and repeat
lonng_df <- clean_and_rename(workstream_names, start_month_year, end_month_year, health_board_trusts = NULL)
View(lonng_df)
