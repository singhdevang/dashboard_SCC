axis.line.x = element_line(color = "gray"),  # Add x-axis line
axis.ticks.x = element_line(color = "gray"),  # Add x-axis tick marks
axis.ticks.length = unit(0.1, "cm"),  # Set the length of the tick marks
axis.ticks.margin = unit(0.2, "cm")  # Adjust the distance between ticks and labels
)
return(p)
}
# Define a new function for plotting the bar graph
plot_line_graph <- function(df, workstream_names) {
# Prepare data for line Graph
count_data <- df %>%
group_by(`Month-Year`) %>%
summarize(Count = sum(!is.na(Score)), .groups = 'drop')  # Use .groups = 'drop' to avoid group_by drop warning
# Handle case when no workstream is selected
if (is.null(workstream_names) || length(workstream_names) == 0) {
workstream_title <- "ALL Workstreams"
} else {
workstream_title <- if(length(workstream_names) > 1) paste(workstream_names, collapse = ", ") else workstream_names
}
# Determine range for y-axis
max_count <- max(count_data$Count, na.rm = TRUE)
upper_limit <- ceiling(max_count / 10) * 10  # Round up to the nearest 10
y_breaks <- seq(0, upper_limit, by = max(1, upper_limit / 10))  # Ensure at least one break if max_count is very low
# Line Graph
p_line <- ggplot(count_data, aes(x = `Month-Year`, y = Count, group = 1)) +
geom_line(color = "#4A7986", size = 0.7) +  # Set bar width and fill color
geom_point(color = "#4A7896", size = 2, shape = 21, fill = "white", stroke = 0.3) +
scale_x_discrete() +
scale_y_continuous(breaks = y_breaks, limits = c(0, upper_limit)) +
labs(
title = paste("Number of Progress Scores Received per Month by", workstream_title),
subtitle = paste("(", start_month_year, "-", end_month_year, ")"),
caption = "Source: SCC National Planning File"
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 12, hjust = 0.5, color = "#1b5768"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#1b5768", margin = margin(b = 10)),
plot.caption = element_text(size = 8, hjust = 1, color = "darkgray"),
axis.text.x = element_text(angle = 90, hjust = 1, color = "darkgray"),
axis.text.y = element_text(angle = 0, hjust = 1, color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_line(colour = "gray"),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA)
)
# Print the line graph
print(p_line)
}
plot_likert <- function(scc_session) {
# Assuming the path and reading of the Excel file works outside this environment
df <- read_excel("C:/Users/De122459/OneDrive - NHS Wales/Desktop/Psychological Safety SCC/PSCC.xlsx")
df1 <- df |>
filter(`SCC Session` == scc_session) |>
select(-1) # Assuming this selects the relevant columns after filtering
num_responses <- nrow(df1)
# Mapping responses to numerical values
response_mapping <- setNames(1:7, c("Strongly Disagree", "Disagree", "Somewhat Disagree", "Neutral", "Somewhat Agree", "Agree", "Strongly Agree"))
df1_numerical <- data.frame(lapply(df1, function(x) response_mapping[as.character(x)]))
df1_factors <- data.frame(lapply(df1_numerical, factor, levels = 1:7))
levels_labels <- c("Strongly Disagree", "Disagree", "Somewhat Disagree", "Neutral", "Somewhat Agree", "Agree", "Strongly Agree")
df1_labeled <- data.frame(lapply(df1_factors, function(x) factor(x, levels = 1:7, labels = levels_labels)))
colnames(df1_labeled) <- gsub("\\.", " ", colnames(df1_labeled))
likert_data <- likert(df1_labeled)
# Define the dynamic title including the number of responses in brackets
dynamic_title <- sprintf("Psychological Safety Analysis of %s [n = %s]", scc_session, num_responses)
# Define custom colors for the plot
custom_colors <- c("#D89F39", "#DFB15F", "#E9C98F", "#BEBEBE", "#81ADB9", "#5E97A6", "#4A7986")
# Plot the likert data with customizations
p <- plot(likert_data) +
theme_minimal(base_family = "sans") + # Use a minimal theme as a base
labs(title = dynamic_title) + # Set title with the number of responses included
theme(plot.title = element_text(color = "#4A7896", hjust = 0.5, size = 13),
panel.border = element_blank(), # Remove the box around the plot
panel.background = element_blank(), # Make background transparent
axis.line = element_blank(),
panel.grid = element_blank(),
axis.title.x = element_blank()
)+
scale_fill_manual(values = custom_colors) +
guides(fill = guide_legend(title = NULL))
return(p) # Display the plot
}
runApp()
# Unified function for preprocessing and plotting with dynamic title and automatic pattern prefixing
plot_scc_sessions <- function(session_type) {
# Hard-coded path to the Excel file
file_path <- "C:/Users/De122459/OneDrive - NHS Wales/Contact List/SCC Master Distribution List .xlsx"
# Automatically prepend '^' to the session_type to match from the start
session_pattern <- paste0("^", session_type)
# Preprocess and transform the data
df <- read_excel(file_path)
df1 <- df %>%
select(4, 6, 19:38) %>%
filter(!(Organisation %in% c("Public Health Wales", "IHI", "RSM", "NHS Wales Executive", "Improvement Cymru"))) %>%
mutate(across(3:22, ~ifelse(grepl("^[Yy]", .) | grepl("^[Yy]$", .), "Y", NA)),
`Coaching Call (Jan 2024)` = ifelse(!is.na(`Jan Lead CC`) | !is.na(`Jan CC...20`), "Y", NA),
`Learning Session 4 (Nov 2023)` = ifelse(!is.na(`LS4 Day 2`) | !is.na(`LS4 Cl Ex`) | !is.na(`LS4 Day 1 (AB, CTM, HD)`), "Y", NA),
`Coaching Call (Oct 2023)` = ifelse(!is.na(`Oct CC`) | !is.na(`Oct Lead CC`), "Y", NA),
`Learning Session 3 (Sep 2023)` = ifelse(!is.na(`LS3`) | !is.na(`LS3 Cl Ex`), "Y", NA),
`Coaching Call (Aug 2023)` = ifelse(!is.na(`Aug CC`) | !is.na(`Aug Lead CC`), "Y", NA),
`Coaching Call (July 2023)` = ifelse(!is.na(`11`) | !is.na(`July Lead CC`), "Y", NA),
`Learning Session 2 (Jun 2023)` = `LS2`,
`Coaching Call (May 2023)` = `May CC`,
`Coaching Call (Apr 2023)` = `Apr CC`,
`Learning Session 1.2 (Mar 2023)` = `LS 1.2`,
`Coaching Call (Feb 2023)` = `Feb CC`,
`Coaching Call (Jan 2023)` = `Jan CC...37`,
`Learning Session 1 (Nov 2022)` = `LS 1`) %>%
select(-c(`Jan Lead CC`, `Jan CC...20`, `LS4 Day 2`, `LS4 Cl Ex`, `LS4 Day 1 (AB, CTM, HD)`,
`Oct CC`, `Oct Lead CC`, `LS3`, `LS3 Cl Ex`, `Aug CC`, `Aug Lead CC`,
`11`, `July Lead CC`, `LS2`, `May CC`, `Apr CC`, `LS 1.2`, `Feb CC`, `Jan CC...37`, `LS 1`, `Workstream`, `Organisation`))
session_order <- c("Coaching Call (Jan 2024)", "Learning Session 4 (Nov 2023)", "Coaching Call (Oct 2023)",
"Learning Session 3 (Sep 2023)", "Coaching Call (Aug 2023)", "Coaching Call (July 2023)",
"Learning Session 2 (Jun 2023)", "Coaching Call (May 2023)", "Coaching Call (Apr 2023)",
"Learning Session 1.2 (Mar 2023)", "Coaching Call (Feb 2023)", "Coaching Call (Jan 2023)",
"Learning Session 1 (Nov 2022)")
session_order <- c("Coaching Call (Jan 2024)", "Learning Session 4 (Nov 2023)", "Coaching Call (Oct 2023)",
"Learning Session 3 (Sep 2023)", "Coaching Call (Aug 2023)", "Coaching Call (July 2023)",
"Learning Session 2 (Jun 2023)", "Coaching Call (May 2023)", "Coaching Call (Apr 2023)",
"Learning Session 1.2 (Mar 2023)", "Coaching Call (Feb 2023)", "Coaching Call (Jan 2023)",
"Learning Session 1 (Nov 2022)")
df2 <- df1 %>%
pivot_longer(cols = everything(), names_to = "SCC Session", values_to = "value") %>%
filter(value == "Y") %>%
group_by(`SCC Session`) %>%
summarise(count = n()) %>%
mutate(`SCC Session` = factor(`SCC Session`, levels = session_order)) %>%
arrange(`SCC Session`) %>%
mutate(`SCC Session` = fct_rev(`SCC Session`))
# Dynamically set the title based on session_type
title <- ifelse(session_type == "Coaching Call", "Total attendance at Coaching Calls",
ifelse(session_type == "Learning Session", "Total Attendance at Learning Sessions",
"Total Attendance"))
# Filter data based on the modified session_pattern for plotting
filtered_data <- df2 %>%
filter(grepl(session_pattern, `SCC Session`))
# Generate plot
p <- ggplot(filtered_data, aes(x = `SCC Session`, y = count, group = 1)) +
geom_line(color = "#4A7986", size = 0.7) +
geom_point(color = "#4A7986", size = 2, shape = 21, fill = "white", stroke = 0.3) +
scale_y_continuous(breaks = seq(0, max(filtered_data$count, na.rm = TRUE) + 10, by = 10), limits = c(0, max(filtered_data$count, na.rm = TRUE) + 10)) +
labs(title = title, caption = "Source: SCC Master Distribution List") +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 14, hjust = 0.5, color = "#1B5768"),
plot.caption = element_text(size = 8, hjust = 1, color = "gray"),
axis.text.x = element_text(angle = 90, color = "gray"),
axis.text.y = element_text(color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
plot.caption.position = "plot",
axis.line.x = element_line(color = "gray"),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.length = unit(0.1, "cm"),
axis.ticks.margin = unit(0.2, "cm")
)
return(p)
}
runApp()
plot_box_plot <- function(df, workstream_names, health_board_trusts) {
# Handle case when no workstream is selected
if (is.null(workstream_names) || length(workstream_names) == 0) {
workstream_title <- "ALL Workstreams"
} else {
workstream_title <- if(length(workstream_names) > 1) paste(workstream_names, collapse = ", ") else workstream_names
}
# Handle case when no health board/trust is selected
if (is.null(health_board_trusts) || length(health_board_trusts) == 0) {
health_board_trust_title <- ""
} else {
health_board_trust_title <- paste("[", paste(health_board_trusts, collapse = ", "), "]", sep = "")
}
# Plotting
p <- ggplot(df, aes(x = `Month-Year`, y = `Score`)) +
geom_boxplot(na.rm = TRUE, fill = '#4A7986', color = 'darkgray') +
scale_x_discrete() +
scale_y_continuous(breaks = seq(0,5, by = 0.5), limits = c(0,5))+
labs(
title = paste("Box Plot of Monthly Progress Scores for", workstream_title, health_board_trust_title),
subtitle = paste("(", start_month_year, "-", end_month_year, ")"),
caption = "Source: SCC National Planning File"
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 12, hjust = 0.5, color = "#1b5768"),
plot.subtitle = element_text(size = 10, hjust = 0.5, color = "#1b5768", margin = margin(b = 10)),  # Style the subtitle
plot.caption = element_text(size = 7, hjust = 1, color = "gray"),
axis.text.x = element_text(angle = 90, hjust = 1, color = "darkgray"),
axis.text.y = element_text(angle = 0, hjust = 1, color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_line(color = "gray"),
axis.line.y = element_line(color = "gray"),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.y = element_line(color = "gray"),
axis.ticks.length = unit(0.1, "cm"),
axis.ticks.margin = unit(0.2, "cm"),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.caption.position = "plot"
)
# Print the plot
print(p)
}
# Define a new function for plotting the bar graph
plot_line_graph <- function(df, workstream_names, health_board_trusts) {
# Prepare data for line Graph
count_data <- df %>%
group_by(`Month-Year`) %>%
summarize(Count = sum(!is.na(Score)), .groups = 'drop')  # Use .groups = 'drop' to avoid group_by drop warning
# Handle case when no workstream is selected
if (is.null(workstream_names) || length(workstream_names) == 0) {
workstream_title <- "ALL Workstreams"
} else {
workstream_title <- if(length(workstream_names) > 1) paste(workstream_names, collapse = ", ") else workstream_names
}
# Handle case when no health board/trust is selected
if (is.null(health_board_trusts) || length(health_board_trusts) == 0) {
health_board_trust_title <- ""
} else {
health_board_trust_title <- paste("[", paste(health_board_trusts, collapse = ", "), "]", sep = "")
}
# Determine range for y-axis
max_count <- max(count_data$Count, na.rm = TRUE)
upper_limit <- ceiling(max_count / 10) * 10  # Round up to the nearest 10
y_breaks <- seq(0, upper_limit, by = max(1, upper_limit / 10))  # Ensure at least one break if max_count is very low
# Line Graph
p_line <- ggplot(count_data, aes(x = `Month-Year`, y = Count, group = 1)) +
geom_line(color = "#4A7986", size = 0.7) +  # Set bar width and fill color
geom_point(color = "#4A7896", size = 2, shape = 21, fill = "white", stroke = 0.3) +
scale_x_discrete() +
scale_y_continuous(breaks = y_breaks, limits = c(0, upper_limit)) +
labs(
title = paste("Number of Progress Scores Received per Month by", workstream_title, health_board_trust_title),
subtitle = paste("(", start_month_year, "-", end_month_year, ")"),
caption = "Source: SCC National Planning File"
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 12, hjust = 0.5, color = "#1b5768"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#1b5768", margin = margin(b = 10)),
plot.caption = element_text(size = 8, hjust = 1, color = "darkgray"),
axis.text.x = element_text(angle = 90, hjust = 1, color = "darkgray"),
axis.text.y = element_text(angle = 0, hjust = 1, color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_line(colour = "gray"),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA)
)
# Print the line graph
print(p_line)
}
runApp()
plot_box_plot <- function(df, workstream_names, health_board_trusts) {
# Handle case when no workstream is selected
if (is.null(workstream_names) || length(workstream_names) == 0) {
workstream_title <- "ALL Workstreams"
} else {
workstream_title <- if(length(workstream_names) > 1) paste(workstream_names, collapse = ", ") else workstream_names
}
# Determine additional title information based on health_board_trusts
additional_info <- if (!is.null(health_board_trusts) && length(health_board_trusts) > 0) {
paste("[", paste(health_board_trusts, collapse = ", "), "]", sep = "")
} else {
""
}
# Plotting
p <- ggplot(df, aes(x = `Month-Year`, y = `Score`)) +
geom_boxplot(na.rm = TRUE, fill = '#4A7986', color = 'darkgray') +
scale_x_discrete() +
scale_y_continuous(breaks = seq(0,5, by = 0.5), limits = c(0,5))+
labs(
title = paste("Box Plot of Monthly Progress Scores for", workstream_title, additional_info),
subtitle = paste("(", start_month_year, "-", end_month_year, ")"),
caption = "Source: SCC National Planning File"
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 12, hjust = 0.5, color = "#1b5768"),
plot.subtitle = element_text(size = 10, hjust = 0.5, color = "#1b5768", margin = margin(b = 10)),  # Style the subtitle
plot.caption = element_text(size = 7, hjust = 1, color = "gray"),
axis.text.x = element_text(angle = 90, hjust = 1, color = "darkgray"),
axis.text.y = element_text(angle = 0, hjust = 1, color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_line(color = "gray"),
axis.line.y = element_line(color = "gray"),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.y = element_line(color = "gray"),
axis.ticks.length = unit(0.1, "cm"),
axis.ticks.margin = unit(0.2, "cm"),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.caption.position = "plot"
)
# Print the plot
print(p)
}
# Define a new function for plotting the bar graph
plot_line_graph <- function(df, workstream_names, health_board_trusts) {
# Prepare data for line Graph
count_data <- df %>%
group_by(`Month-Year`) %>%
summarize(Count = sum(!is.na(Score)), .groups = 'drop')  # Use .groups = 'drop' to avoid group_by drop warning
# Handle case when no workstream is selected
if (is.null(workstream_names) || length(workstream_names) == 0) {
workstream_title <- "ALL Workstreams"
} else {
workstream_title <- if(length(workstream_names) > 1) paste(workstream_names, collapse = ", ") else workstream_names
}
# Determine additional title information based on health_board_trusts
additional_info <- if (!is.null(health_board_trusts) && length(health_board_trusts) > 0) {
paste("[", paste(health_board_trusts, collapse = ", "), "]", sep = "")
} else {
""
}
# Determine range for y-axis
max_count <- max(count_data$Count, na.rm = TRUE)
upper_limit <- ceiling(max_count / 10) * 10  # Round up to the nearest 10
y_breaks <- seq(0, upper_limit, by = max(1, upper_limit / 10))  # Ensure at least one break if max_count is very low
# Line Graph
p_line <- ggplot(count_data, aes(x = `Month-Year`, y = Count, group = 1)) +
geom_line(color = "#4A7986", size = 0.7) +  # Set bar width and fill color
geom_point(color = "#4A7896", size = 2, shape = 21, fill = "white", stroke = 0.3) +
scale_x_discrete() +
scale_y_continuous(breaks = y_breaks, limits = c(0, upper_limit)) +
labs(
title = paste("Number of Progress Scores Received per Month by", workstream_title, additional_info),
subtitle = paste("(", start_month_year, "-", end_month_year, ")"),
caption = "Source: SCC National Planning File"
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 12, hjust = 0.5, color = "#1b5768"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#1b5768", margin = margin(b = 10)),
plot.caption = element_text(size = 8, hjust = 1, color = "darkgray"),
axis.text.x = element_text(angle = 90, hjust = 1, color = "darkgray"),
axis.text.y = element_text(angle = 0, hjust = 1, color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_line(colour = "gray"),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA)
)
# Print the line graph
print(p_line)
}
runApp()
runApp()
process_data <- function(workstream_names = NULL, start_month_year, end_month_year, health_board_trusts = NULL) {
# Read the data from an Excel file
df <- read_excel("C:/Users/De122459/OneDrive - NHS Wales/National SCC Project Planning/National SCC project planning.xlsx")
# Data cleaning and transformation
new_df <- df %>%
# Conditionally filter by 'Workstream' if the argument is not NULL
{
if(!is.null(workstream_names)) {
filter(., Workstream %in% workstream_names)
} else {
.
}
} %>%
# Conditionally filter by 'Health Board / Trust' if the argument is not NULL
{
if(!is.null(health_board_trusts)) {
filter(., `Health Board / Trust` %in% health_board_trusts)
} else {
.
}
} %>%
# Select columns containing "202" in their names
select(contains("202")) %>%
# Replace empty or "NO Report received" values with NA
mutate(across(everything(), ~if_else(. == "" | . == "NO Report received" | . == "No report received", NA_character_ , .))) %>%
# Rename columns to shorter names and parse numbers
rename("February 2023"= "Monthly Progress Score - February 2023 (MSSW only)",
"March 2023" = "Monthly Progress Score - March 2023 (MSSW ONLY)",
"April 2023" = "Monthly Progress Score - April 2023",
"May 2023" = "Monthly Progress Score - May 2023",
"June 2023" = "Monthly Progress Score - June 2023",
"July 2023" = "Monthly Progress Score - July 2023",
"August 2023" = "Monthly Progress Score - August 2023",
"September 2023" = "Monthly Progress Score - September 2023",
"October 2023" = "Monthly Progress Score - October 2023 (Due 21/11/23)",
"November 2023" = "Monthly Progress Score - November 2023 (Due 13th Dec)",
"December 2023" = "Monthly Progress Score - December 2023 (due 17th January)",
"January 2024" = "Monthly Progress Score - January 2024 (due 13th Feb 2024)",
"February 2024" = "Monthly Progress Score - February 2024 (due 13th march 2024)") %>%
# Parse numeric values
mutate(across(everything(), ~parse_number(.)))
# Define the start and end dates
start_date <- as.Date(paste0("01 ", start_month_year), format = "%d %B %Y")
end_date <- as.Date(paste0("01 ", end_month_year), format = "%d %B %Y")
# Generate a sequence of month-years between the start and end dates
date_sequence <- seq.Date(start_date, end_date, by = "month")
month_year_sequence <- format(date_sequence, "%B %Y")
# Prepare column names for comparison
month_year_cols <- names(new_df)
# Filter the columns that are in the sequence
relevant_cols <- month_year_cols[month_year_cols %in% month_year_sequence]
# Pivot the data frame to long format
long_df <- new_df %>%
select(all_of(relevant_cols)) %>%
pivot_longer(cols = everything(),
names_to = "Month-Year",
values_to = "Score",
values_drop_na = FALSE) %>%
mutate(`Month-Year` = factor(`Month-Year`, levels = month_year_sequence, ordered = TRUE)) %>%
arrange(`Month-Year`, Score)
return(long_df)
}
loong_df <- process_data(workstream_names, start_month_year, end_month_year, health_board_trusts)
plot_box_plot <- function(df, workstream_names){
# Handle case when no workstream is selected
if (is.null(workstream_names) || length(workstream_names) == 0) {
workstream_title <- "ALL Workstreams"
} else {
workstream_title <- if(length(workstream_names) > 1) paste(workstream_names, collapse = ", ") else workstream_names
}
# Plotting
p <- ggplot(df, aes(x = `Month-Year`, y = `Score`)) +
geom_boxplot(na.rm = TRUE, fill = '#4A7986', color = 'darkgray') +
scale_x_discrete() +
scale_y_continuous(breaks = seq(0,5, by = 0.5), limits = c(0,5))+
labs(
title = paste("Box Plot of Monthly Progress Scores for", workstream_title),
subtitle = paste("(", start_month_year, "-", end_month_year, ")"),
caption = "Source: SCC National Planning File"
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 12, hjust = 0.5, color = "#1b5768"),
plot.subtitle = element_text(size = 10, hjust = 0.5, color = "#1b5768", margin = margin(b = 10)),  # Style the subtitle
plot.caption = element_text(size = 7, hjust = 1, color = "gray"),
axis.text.x = element_text(angle = 90, hjust = 1, color = "darkgray"),
axis.text.y = element_text(angle = 0, hjust = 1, color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_line(color = "gray"),
axis.line.y = element_line(color = "gray"),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.y = element_line(color = "gray"),
axis.ticks.length = unit(0.1, "cm"),
axis.ticks.margin = unit(0.2, "cm"),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.caption.position = "plot"
)
# Print the plot
print(p)
}
# Define a new function for plotting the bar graph
plot_line_graph <- function(df, workstream_names) {
# Prepare data for line Graph
count_data <- df %>%
group_by(`Month-Year`) %>%
summarize(Count = sum(!is.na(Score)), .groups = 'drop')  # Use .groups = 'drop' to avoid group_by drop warning
# Handle case when no workstream is selected
if (is.null(workstream_names) || length(workstream_names) == 0) {
workstream_title <- "ALL Workstreams"
} else {
workstream_title <- if(length(workstream_names) > 1) paste(workstream_names, collapse = ", ") else workstream_names
}
# Determine range for y-axis
max_count <- max(count_data$Count, na.rm = TRUE)
upper_limit <- ceiling(max_count / 10) * 10  # Round up to the nearest 10
y_breaks <- seq(0, upper_limit, by = max(1, upper_limit / 10))  # Ensure at least one break if max_count is very low
# Line Graph
p_line <- ggplot(count_data, aes(x = `Month-Year`, y = Count, group = 1)) +
geom_line(color = "#4A7986", size = 0.7) +  # Set bar width and fill color
geom_point(color = "#4A7896", size = 2, shape = 21, fill = "white", stroke = 0.3) +
scale_x_discrete() +
scale_y_continuous(breaks = y_breaks, limits = c(0, upper_limit)) +
labs(
title = paste("Number of Progress Scores Received per Month by", workstream_title),
subtitle = paste("(", start_month_year, "-", end_month_year, ")"),
caption = "Source: SCC National Planning File"
) +
theme_minimal(base_family = "sans") +
theme(
plot.title = element_text(size = 12, hjust = 0.5, color = "#1b5768"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "#1b5768", margin = margin(b = 10)),
plot.caption = element_text(size = 8, hjust = 1, color = "darkgray"),
axis.text.x = element_text(angle = 90, hjust = 1, color = "darkgray"),
axis.text.y = element_text(angle = 0, hjust = 1, color = "darkgray"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_line(colour = "gray"),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = "gray"),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA)
)
# Print the line graph
print(p_line)
}
runApp()
